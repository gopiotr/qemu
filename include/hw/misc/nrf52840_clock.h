/*
 * nRF52840 SoC CLOCK emulation
 */

#ifndef NRF52840_CLOCK_H
#define NRF52840_CLOCK_H

#include "hw/sysbus.h"
#include "qom/object.h"
#include "hw/registerfields.h"

#define CLOCK_SIZE 0x1000

#define TYPE_NRF52840_CLOCK "nrf52840_soc.clock"
OBJECT_DECLARE_SIMPLE_TYPE(NRF52840CLOCKState, NRF52840_CLOCK)

REG32(CLOCK_TASKS_HFCLKSTART, 0x000)
REG32(CLOCK_TASKS_HFCLKSTOP, 0x004)
REG32(CLOCK_TASKS_LFCLKSTART, 0x008)
REG32(CLOCK_TASKS_LFCLKSTOP, 0x00C)
REG32(CLOCK_TASKS_CAL, 0x010)
REG32(CLOCK_TASKS_CTSTART, 0x014)
REG32(CLOCK_TASKS_CTSTOP, 0x018)
REG32(CLOCK_EVENTS_HFCLKSTARTED, 0x100)
    FIELD(CLOCK_EVENTS_HFCLKSTARTED, GENERATED, 0, 1)
REG32(CLOCK_EVENTS_LFCLKSTARTED, 0x104)
    FIELD(CLOCK_EVENTS_LFCLKSTARTED, GENERATED, 0, 1)
REG32(CLOCK_EVENTS_DONE, 0x10C)
REG32(CLOCK_EVENTS_CTTO, 0x110)
REG32(CLOCK_EVENTS_CTSTARTED, 0x128)
REG32(CLOCK_EVENTS_CTSTOPPED, 0x12C)
REG32(CLOCK_INTENSET, 0x304)
    FIELD(CLOCK_INTENSET, HFCLKSTARTED, 0, 1)
    FIELD(CLOCK_INTENSET, LFCLKSTARTED, 1, 1)
REG32(CLOCK_INTENCLR, 0x308)
    FIELD(CLOCK_INTENCLR, HFCLKSTARTED, 0, 1)
    FIELD(CLOCK_INTENCLR, LFCLKSTARTED, 1, 1)
REG32(CLOCK_HFCLKRUN, 0x408)
REG32(CLOCK_HFCLKSTAT, 0x40C)
    FIELD(CLOCK_HFCLKSTAT, STATE, 16, 1)
REG32(CLOCK_LFCLKRUN, 0x414)
REG32(CLOCK_LFCLKSTAT, 0x418)
    FIELD(CLOCK_LFCLKSTAT, SRC, 0, 2)
    FIELD(CLOCK_LFCLKSTAT, STATE, 16, 1)
REG32(CLOCK_LFCLKSRCCOPY, 0x41C)
REG32(CLOCK_LFCLKSRC, 0x518)
    FIELD(CLOCK_LFCLKSRC, SRC, 0, 2)
REG32(CLOCK_HFXODEBOUNCE, 0x528)
REG32(CLOCK_CTIV, 0x538)
REG32(CLOCK_TRACECONFIG, 0x55C)
REG32(CLOCK_LFRCMODE, 0x5B4)

#define CLOCK_REGISTERS_SIZE 0x5B4

// REG32(UART_INTEN, 0x300)  // TODO: unavaiable on nRF52840
//     FIELD(UART_INTEN, CTS, 0, 1)
//     FIELD(UART_INTEN, NCTS, 1, 1)
//     FIELD(UART_INTEN, RXDRDY, 2, 1)
//     FIELD(UART_INTEN, TXDRDY, 7, 1)
//     FIELD(UART_INTEN, ERROR, 9, 1)
//     FIELD(UART_INTEN, RXTO, 17, 1)


struct NRF52840CLOCKState {
    SysBusDevice parent_obj;

    MemoryRegion iomem;
    qemu_irq irq;

    uint32_t reg[CLOCK_REGISTERS_SIZE];

    bool hfclk_started;
    bool lfclk_started;
    bool hfclk_started_event_enabled;
    bool hfclk_event_generated;
    bool lfclk_started_event_enabled;
    bool lfclk_event_generated;
    uint32_t lfclk_source;
};

#endif
